// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  MOVIE
  VIDEOGAME
  MUSIC
  BOOK
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum Role {
  USER
  ADMIN
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String?
  name                String?
  credits             Float
  playlistCollections PlaylistCollection[]
  role                Role

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  FavoriteMusicPlaylist FavoriteMusicPlaylist[]
  SongReaction          SongReaction[]
}

model PlaylistCollection {
  id          String          @id @default(cuid())
  mediaType   MediaType
  description String
  prompt      String
  playlists   MusicPlaylist[]
  creatorId   String

  creator   User      @relation(fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model FavoriteMusicPlaylist {
  id              String @id @default(cuid())
  userId          String
  musicPlaylistId String

  user     User          @relation(fields: [userId], references: [id])
  playlist MusicPlaylist @relation(fields: [musicPlaylistId], references: [id])

  @@unique([userId, musicPlaylistId])
}

model SongReaction {
  id       String       @id @default(cuid())
  reaction ReactionType
  userId   String
  songId   String

  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])

  @@unique([userId, songId])
}

model MusicPlaylist {
  id                   String @id @default(cuid())
  name                 String
  description          String
  playlistCollectionId String

  playlistCollection    PlaylistCollection      @relation(fields: [playlistCollectionId], references: [id])
  songs                 Song[]
  FavoriteMusicPlaylist FavoriteMusicPlaylist[]
}

model Song {
  id              String @id @default(cuid())
  input           String
  musicPlaylistId String
  spotifyId       String
  /**
   * length          Float
   * band            String
   * datePublished   DateTime
   */

  musicPlaylist MusicPlaylist  @relation(fields: [musicPlaylistId], references: [id])
  SongReaction  SongReaction[]
}
