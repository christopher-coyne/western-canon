// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// This is the Prisma schema for the study guide application

model User {
  id                String               @id @default(cuid())
  email             String               @unique
  name              String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  role              Role                 @default(USER)
  studyGuides       StudyGuide[]
  favoriteGuides    StudyGuideFavorite[]
  favoriteQuestions QuestionFavorite[]
  Project           Project[]
  ProjectFavorite   ProjectFavorite[]
}

model StudyGuide {
  id          String               @id @default(cuid())
  title       String
  description String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  author      User                 @relation(fields: [authorId], references: [id])
  authorId    String
  sections    Section[]
  tags        Tag[]
  favorites   StudyGuideFavorite[]
}

model Section {
  id           String     @id @default(cuid())
  title        String
  order        Int
  studyGuide   StudyGuide @relation(fields: [studyGuideId], references: [id])
  studyGuideId String
  questions    Question[]
}

model Question {
  id        String             @id @default(cuid())
  title     String
  link      String
  section   Section            @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  favorites QuestionFavorite[]
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  studyGuides StudyGuide[]
}

model StudyGuideFavorite {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  studyGuide   StudyGuide @relation(fields: [studyGuideId], references: [id], onDelete: Cascade)
  studyGuideId String
  createdAt    DateTime   @default(now())

  @@unique([userId, studyGuideId])
}

model QuestionFavorite {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  createdAt  DateTime @default(now())

  @@unique([userId, questionId])
}

model ProjectFavorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([userId, projectId])
}

model Project {
  id          String @id @default(cuid())
  title       String
  description String // Markdown content
  creatorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator         User              @relation(fields: [creatorId], references: [id])
  ProjectFavorite ProjectFavorite[]
}

/**
 * Study Guides
 * POST   /api/study-guides           - Create new study guide
 * GET    /api/study-guides           - List all study guides (with pagination & filters)
 * GET    /api/study-guides/:id       - Get specific study guide with all sections
 * PUT    /api/study-guides/:id       - Update study guide
 * DELETE /api/study-guides/:id       - Delete study guide
 */

/**
 * Study Guide Sections
 * POST   /api/study-guides/:id/sections     - Add section to study guide
 * PUT    /api/sections/:id                  - Update section
 * DELETE /api/sections/:id                  - Delete section
 * PUT    /api/sections/reorder             - Reorder sections (batch update)
 */

/**
 * Study Guide Questions
 * POST   /api/sections/:id/questions        - Add question to section
 * PUT    /api/questions/:id                 - Update question
 * DELETE /api/questions/:id                 - Delete question
 */

/**
 * Favorites
 * POST   /api/study-guides/:id/favorite     - Favorite a study guide
 * DELETE /api/study-guides/:id/favorite     - Unfavorite a study guide
 * POST   /api/questions/:id/favorite        - Favorite a question
 * DELETE /api/questions/:id/favorite        - Unfavorite a question
 * GET    /api/users/me/favorites           - Get user's favorite guides & questions
 */

/**
 * Tags
 * GET    /api/tags                         - List all tags
 * POST   /api/tags                         - Create new tag
 * GET    /api/study-guides/tags/:tag       - Get study guides by tag
 */

/**
 * Projects
 * POST   /api/projects                     - Create new project
 * GET    /api/projects                     - List all projects
 * GET    /api/projects/:id                 - Get specific project
 * PUT    /api/projects/:id                 - Update project
 * DELETE /api/projects/:id                 - Delete project
 */

/**
 * Search
 * GET    /api/search                       - Search across study guides, questions, and projects
 */
