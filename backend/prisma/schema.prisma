// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum WorkMedium {
  BOOKS
  SHORT_STORIES
  POETRY
  THEATRE
  OTHER
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String
  cursor    Int        @default(0) // way to track which snippets a user has read
  role      Role
  dayStreak Int        @default(0)
  lastActive DateTime?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  favorites Favorite[]

  @@map("users")
}

model Author {
  id         String    @id @default(uuid())
  name       String
  birthYear     Int?
  birthYearApprox Boolean @default(true)
  deathYear     Int?
  deathYearApprox Boolean @default(true)
  intro    String @db.Text

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt DateTime?
  
  works      Work[]
  genres     AuthorGenre[]
  
  @@map("authors")
}

model Work {
  id           String     @id @default(uuid())
  title        String
  introduction String     @db.Text
  pageCount    Int?
  publishYear  Int?
  authorId     String
  medium       WorkMedium?

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt DateTime?

  author       Author     @relation(fields: [authorId], references: [id])
  snippets     Snippet[]
  genres       WorkGenre[]
  
  @@map("works")
}

model Snippet {
  id        String     @id @default(uuid())
  content   String     @db.Text
  analysis  String?    @db.Text
  citation  String?    @db.Text
  subsection String?    @db.Text
  workId    String
  order     Int        @default(autoincrement()) // way to track which snippets a user has read

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  
  work      Work       @relation(fields: [workId], references: [id])
  favorites Favorite[]
  
  @@map("snippets")
}

model Genre {
  id         String       @id @default(uuid())
  name       String       @unique

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  
  works      WorkGenre[]
  authors    AuthorGenre[]
  
  @@map("genres")
}

model WorkGenre {
  workId    String
  genreId   String
  work      Work     @relation(fields: [workId], references: [id])
  genre     Genre    @relation(fields: [genreId], references: [id])
  
  @@id([workId, genreId])
  @@map("work_genres")
}

model AuthorGenre {
  authorId  String
  genreId   String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
  
  @@id([authorId, genreId])
  @@map("author_genres")
}

model Favorite {
  userId    String
  snippetId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  
  @@id([userId, snippetId])
  @@map("favorites")
}